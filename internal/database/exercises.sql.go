// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: exercises.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const addExerciseCategory = `-- name: AddExerciseCategory :one
INSERT INTO exercise_categories (exercise_id, category_id)
VALUES (
    $1,
    $2
)
RETURNING exercise_id, category_id
`

type AddExerciseCategoryParams struct {
	ExerciseID int32
	CategoryID int32
}

func (q *Queries) AddExerciseCategory(ctx context.Context, arg AddExerciseCategoryParams) (ExerciseCategory, error) {
	row := q.db.QueryRowContext(ctx, addExerciseCategory, arg.ExerciseID, arg.CategoryID)
	var i ExerciseCategory
	err := row.Scan(&i.ExerciseID, &i.CategoryID)
	return i, err
}

const addExerciseMuscleGroup = `-- name: AddExerciseMuscleGroup :one
INSERT INTO exercise_muscle_groups (exercise_id, muscle_group_id)
VALUES (
    $1,
    $2
)
RETURNING exercise_id, muscle_group_id
`

type AddExerciseMuscleGroupParams struct {
	ExerciseID    int32
	MuscleGroupID int32
}

func (q *Queries) AddExerciseMuscleGroup(ctx context.Context, arg AddExerciseMuscleGroupParams) (ExerciseMuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, addExerciseMuscleGroup, arg.ExerciseID, arg.MuscleGroupID)
	var i ExerciseMuscleGroup
	err := row.Scan(&i.ExerciseID, &i.MuscleGroupID)
	return i, err
}

const getExercisesByCategories = `-- name: GetExercisesByCategories :many
SELECT e.id, e.name, e.description FROM exercises e
JOIN exercise_categories ON id = exercise_id
WHERE category_id = ANY($1::int[])
`

// Returns exercises that have ALL of the given categories
func (q *Queries) GetExercisesByCategories(ctx context.Context, categoryIds []int32) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getExercisesByCategories, pq.Array(categoryIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExercisesByMuscleGroups = `-- name: GetExercisesByMuscleGroups :many
SELECT e.id, e.name, e.description FROM exercises e
JOIN exercise_muscle_groups ON id = exercise_id
WHERE muscle_group_id = ANY($1::int[])
`

// Returns exercises that have ALL of the given muscle groups
func (q *Queries) GetExercisesByMuscleGroups(ctx context.Context, muscleGroupIds []int32) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getExercisesByMuscleGroups, pq.Array(muscleGroupIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeExerciseCategory = `-- name: RemoveExerciseCategory :exec
DELETE FROM exercise_categories
WHERE exercise_id = $1 AND category_id = $2
`

type RemoveExerciseCategoryParams struct {
	ExerciseID int32
	CategoryID int32
}

func (q *Queries) RemoveExerciseCategory(ctx context.Context, arg RemoveExerciseCategoryParams) error {
	_, err := q.db.ExecContext(ctx, removeExerciseCategory, arg.ExerciseID, arg.CategoryID)
	return err
}

const removeExerciseMuscleGroup = `-- name: RemoveExerciseMuscleGroup :exec
DELETE FROM exercise_muscle_groups
WHERE exercise_id = $1 AND muscle_group_id = $2
`

type RemoveExerciseMuscleGroupParams struct {
	ExerciseID    int32
	MuscleGroupID int32
}

func (q *Queries) RemoveExerciseMuscleGroup(ctx context.Context, arg RemoveExerciseMuscleGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeExerciseMuscleGroup, arg.ExerciseID, arg.MuscleGroupID)
	return err
}
