// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: crud_exercises.sql

package database

import (
	"context"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (name, description)
VALUES (
    $1,
    $2
)
RETURNING id, name, description
`

type CreateExerciseParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise, arg.Name, arg.Description)
	var i Exercise
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercises
WHERE id = $1
`

func (q *Queries) DeleteExercise(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, id)
	return err
}

const getExercise = `-- name: GetExercise :one
SELECT id, name, description FROM exercises
WHERE id = $1
`

func (q *Queries) GetExercise(ctx context.Context, id int32) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExercise, id)
	var i Exercise
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getExerciseByName = `-- name: GetExerciseByName :one
SELECT id, name, description FROM exercises
WHERE name = $1
`

func (q *Queries) GetExerciseByName(ctx context.Context, name string) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExerciseByName, name)
	var i Exercise
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getExercises = `-- name: GetExercises :many
SELECT id, name, description FROM exercises
`

// TODO: Add pagination/limits or remove this query
func (q *Queries) GetExercises(ctx context.Context) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetExerciseId = `-- name: ResetExerciseId :exec
SELECT setval('exercises_id_seq', 1, FALSE)
`

func (q *Queries) ResetExerciseId(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetExerciseId)
	return err
}

const updateExercise = `-- name: UpdateExercise :exec
UPDATE exercises
SET name = $2,
    description = $3
WHERE id = $1
`

type UpdateExerciseParams struct {
	ID          int32
	Name        string
	Description string
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error {
	_, err := q.db.ExecContext(ctx, updateExercise, arg.ID, arg.Name, arg.Description)
	return err
}
