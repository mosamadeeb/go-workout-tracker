// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: crud_muscle_groups.sql

package database

import (
	"context"
)

const createMuscleGroup = `-- name: CreateMuscleGroup :one
INSERT INTO muscle_groups (name)
VALUES (
    $1
)
RETURNING id, name
`

func (q *Queries) CreateMuscleGroup(ctx context.Context, name string) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, createMuscleGroup, name)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteMuscleGroup = `-- name: DeleteMuscleGroup :exec
DELETE FROM muscle_groups
WHERE id = $1
`

func (q *Queries) DeleteMuscleGroup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMuscleGroup, id)
	return err
}

const getMuscleGroup = `-- name: GetMuscleGroup :one
SELECT id, name FROM muscle_groups
WHERE id = $1
`

func (q *Queries) GetMuscleGroup(ctx context.Context, id int32) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, getMuscleGroup, id)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getMuscleGroupByName = `-- name: GetMuscleGroupByName :one
SELECT id, name FROM muscle_groups
WHERE name = $1
`

func (q *Queries) GetMuscleGroupByName(ctx context.Context, name string) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, getMuscleGroupByName, name)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getMuscleGroups = `-- name: GetMuscleGroups :many
SELECT id, name FROM muscle_groups
`

func (q *Queries) GetMuscleGroups(ctx context.Context) ([]MuscleGroup, error) {
	rows, err := q.db.QueryContext(ctx, getMuscleGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MuscleGroup
	for rows.Next() {
		var i MuscleGroup
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetMuscleGroupId = `-- name: ResetMuscleGroupId :exec
SELECT setval('muscle_groups_id_seq', 1, FALSE)
`

func (q *Queries) ResetMuscleGroupId(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetMuscleGroupId)
	return err
}

const updateMuscleGroup = `-- name: UpdateMuscleGroup :exec
UPDATE muscle_groups
SET name = $2
WHERE id = $1
`

type UpdateMuscleGroupParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateMuscleGroup(ctx context.Context, arg UpdateMuscleGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateMuscleGroup, arg.ID, arg.Name)
	return err
}
